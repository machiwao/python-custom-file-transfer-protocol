
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
from tkinter import messagebox
import socket
import threading
import time


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\jeric\OneDrive\Desktop\OPSYS APP\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1200x630")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 630,
    width = 1200,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_text(
    182.0,
    65.0,
    anchor="nw",
    text="Receive File",
    fill="#1D1C1C",
    font=("Inter", 60 * -1)
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    85.99999475463346,
    86.99999475463346,
    image=image_image_1
)

def show_status_dialog(title, message):
    messagebox.showinfo(title, message)

def start_server():
    # Start server-side backend
    server_process = subprocess.Popen(
        ["python", "C:\\Users\\jeric\\OneDrive\\Desktop\\OPSYS APP\\build\\Server.py"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    
    # Show a dialog indicating the server has started
    show_status_dialog("Server Status", "Server is running...")

    # Monitor the server output for the received file status
    while True:
        output = server_process.stdout.readline()
        if output == b"" and server_process.poll() is not None:
            break
        if output:
            decoded_output = output.decode().strip()
            if "File" in decoded_output and "received successfully" in decoded_output:
                filename = decoded_output.split(" ")[1]  # Extract the filename
                show_status_dialog("File Received", f"File '{filename}' received successfully.")
            elif "Error" in decoded_output:
                show_status_dialog("Error", f"Error: {decoded_output}")

    # Show a dialog indicating the server has stopped
    show_status_dialog("Server Status", "Server has stopped.")

def openServer():
    # Use threading to avoid blocking the main thread
    server_thread = threading.Thread(target=start_server)
    server_thread.start()

button_startReceiving = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_startReceiving,
    borderwidth=0,
    highlightthickness=0,
    command=openServer,
    relief="flat"
)
button_1.place(
    x=311.0,
    y=225.0,
    width=578.0,
    height=100.0
)

def open_HomePage():
    window.withdraw()  # Hide the first window
    subprocess.Popen(["python", "C:\\Users\\jeric\\OneDrive\\Desktop\\OPSYS APP\\build\\HomePage.py"])  # Open Receive Home
    
button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=open_HomePage,
    relief="flat"
)
button_2.place(
    x=1070.0,
    y=47.0,
    width=80.0,
    height=80.0
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    600.0,
    435.0,
    image=image_image_2
)

window.resizable(False, False)
window.mainloop()
